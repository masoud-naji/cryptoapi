{"version":3,"file":"static/js/129.d14a0d2c.chunk.js","mappings":"yNA+FA,UApFA,WACE,IAAMA,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAC3BC,QAAQC,IAAIJ,GAYZ,IAAMK,EAASL,EAAQM,UACjBC,EAAUP,EAAQQ,WAElBC,EAAMJ,GAAWA,EAAOK,KAAI,SAACC,GAAD,MAAY,CAC5CC,KAAM,IAAIC,KAAKF,EAAM,IAAIG,mBAAmB,SAC5CC,MAAOJ,EAAM,OAGTK,EAAQT,EAAQG,KAAI,SAACC,GAAD,MAAY,CACpCM,OAAQN,EAAM,OAGhB,IAAK,IAAMO,KAAOT,EAChB,IACEA,EAAKS,GAAKD,OAASD,EAAME,GAAKD,OAC9B,MAAOE,IAKX,IAAMC,EAAgB,WACpB,IAAIC,EAAcC,OAAOC,WACzB,QAAQ,GACN,KAAKF,EAAc,IACjBA,EAAcC,OAAOC,WACrB,MACF,KAAKF,EAAc,IACjBA,EAAc,IACd,MACF,KAAKA,EAAc,KACjBA,EAAc,IACd,MACF,QACEA,EAAc,IAGlB,OAAOA,GAGHG,EAAaJ,IACbK,EAAcL,IAAkB,EAQhCM,GACJ,UAAC,IAAD,CACEC,MAAOH,EACPI,OAAQH,EACRI,KAAMpB,EACNqB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,OAAQ,EAAGC,KAAM,GAJhD,WAME,SAAC,IAAD,KACA,SAAC,IAAD,CAAMC,KAAK,WAAWC,QAAQ,QAAQC,OAAO,QAAQC,KAAK,KAC1D,SAAC,IAAD,CAAMH,KAAK,WAAWC,QAAQ,SAASC,OAAO,MAAMC,KAAK,KACzD,SAAC,IAAD,CAAeD,OAAO,OAAOE,gBAAgB,SAC7C,SAAC,IAAD,CAAOH,QAAQ,UACf,SAAC,IAAD,OAGJ,OACE,0BACE,yBAAMV","sources":["Components/Chart/News.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n} from \"recharts\";\r\nimport CoinContext from \"../../contexts/coinContext\";\r\n\r\nfunction Chart() {\r\n  const coinCTX = useContext(CoinContext);\r\n  console.log(coinCTX);\r\n  // console.log(coinCTX.Chartdata);\r\n  // console.log(coinCTX.Chartdata2);\r\n\r\n  // const data = [\r\n  //   { name: \"Page A\", uv: 62389.05373707468 },\r\n  //   { name: \"Page B\", uv: 62193.68335748939 },\r\n  //   { name: \"Page B\", uv: 32036.303972440524 },\r\n  //   { name: \"Page B\", uv: 50962.814229250136 },\r\n  //   { name: \"Page B\", uv: 61999.57837579247 },\r\n  // ];\r\n\r\n  const mydata = coinCTX.Chartdata;\r\n  const mydata2 = coinCTX.Chartdata2;\r\n\r\n  const newD =mydata &&  mydata.map((mdata) => ({\r\n    date: new Date(mdata[0]).toLocaleDateString(\"en-US\"),\r\n    price: mdata[1],\r\n  }));\r\n\r\n  const newD2 = mydata2.map((mdata) => ({\r\n    price2: mdata[1],\r\n  }));\r\n\r\n  for (const key in newD) {\r\n    try {\r\n      newD[key].price2 = newD2[key].price2;\r\n    } catch (error) {}\r\n  }\r\n\r\n  // console.log(newD);\r\n\r\n  const getInnerWidth = () => {\r\n    var WindowWidth = window.innerWidth;\r\n    switch (true) {\r\n      case WindowWidth < 400:\r\n        WindowWidth = window.innerWidth;\r\n        break;\r\n      case WindowWidth < 800:\r\n        WindowWidth = 500;\r\n        break;\r\n      case WindowWidth < 1200:\r\n        WindowWidth = 600;\r\n        break;\r\n      default:\r\n        WindowWidth = 700;\r\n        break;\r\n    }\r\n    return WindowWidth;\r\n  };\r\n\r\n  const InnerWidth = getInnerWidth();\r\n  const InnerHeight = getInnerWidth() / 2;\r\n\r\n  // console.log(window.innerWidth);\r\n  // console.log(InnerWidth);\r\n  // console.log(InnerHeight);\r\n  // console.log(newD2)\r\n  // console.log(newD);\r\n\r\n  const renderLineChart = (\r\n    <LineChart\r\n      width={InnerWidth}\r\n      height={InnerHeight}\r\n      data={newD}\r\n      margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\r\n    >\r\n      <Tooltip />\r\n      <Line type=\"monotone\" dataKey=\"price\" stroke=\"white\" dot={false} />\r\n      <Line type=\"monotone\" dataKey=\"price2\" stroke=\"red\" dot={false} />\r\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n      <XAxis dataKey=\"date\" />\r\n      <YAxis />\r\n    </LineChart>\r\n  );\r\n  return (\r\n    <div>\r\n      <div>{renderLineChart}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n\r\n//width={10} height={10}\r\n"],"names":["coinCTX","useContext","CoinContext","console","log","mydata","Chartdata","mydata2","Chartdata2","newD","map","mdata","date","Date","toLocaleDateString","price","newD2","price2","key","error","getInnerWidth","WindowWidth","window","innerWidth","InnerWidth","InnerHeight","renderLineChart","width","height","data","margin","top","right","bottom","left","type","dataKey","stroke","dot","strokeDasharray"],"sourceRoot":""}